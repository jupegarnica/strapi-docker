input createDroneInput {
  data: DroneInput
}

type createDronePayload {
  drone: Drone
}

input createMotorInput {
  data: MotorInput
}

type createMotorPayload {
  motor: Motor
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input createVideoInput {
  data: VideoInput
}

type createVideoPayload {
  video: Video
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteDroneInput {
  where: InputID
}

type deleteDronePayload {
  drone: Drone
}

input deleteMotorInput {
  where: InputID
}

type deleteMotorPayload {
  motor: Motor
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input deleteVideoInput {
  where: InputID
}

type deleteVideoPayload {
  video: Video
}

type Drone {
  name: String!
  description: String
  frame: String
  brand: String
  weigth_grams: Int
  pictures(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  videos(sort: String, limit: Int, start: Int, where: JSON): [Video]
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DroneAggregator {
  count: Int
  totalCount: Int
  sum: DroneAggregatorSum
  avg: DroneAggregatorAvg
  min: DroneAggregatorMin
  max: DroneAggregatorMax
}

type DroneAggregatorAvg {
  weigth_grams: Float
}

type DroneAggregatorMax {
  weigth_grams: Float
}

type DroneAggregatorMin {
  weigth_grams: Float
}

type DroneAggregatorSum {
  weigth_grams: Float
}

type DroneConnection {
  values: [Drone]
  groupBy: DroneGroupBy
  aggregate: DroneAggregator
}

type DroneConnection_id {
  key: ID
  connection: DroneConnection
}

type DroneConnectionBrand {
  key: String
  connection: DroneConnection
}

type DroneConnectionCreatedAt {
  key: DateTime
  connection: DroneConnection
}

type DroneConnectionDescription {
  key: String
  connection: DroneConnection
}

type DroneConnectionFrame {
  key: String
  connection: DroneConnection
}

type DroneConnectionId {
  key: ID
  connection: DroneConnection
}

type DroneConnectionName {
  key: String
  connection: DroneConnection
}

type DroneConnectionUpdatedAt {
  key: DateTime
  connection: DroneConnection
}

type DroneConnectionWeigth_grams {
  key: Int
  connection: DroneConnection
}

type DroneGroupBy {
  name: [DroneConnectionName]
  description: [DroneConnectionDescription]
  frame: [DroneConnectionFrame]
  brand: [DroneConnectionBrand]
  weigth_grams: [DroneConnectionWeigth_grams]
  _id: [DroneConnection_id]
  id: [DroneConnectionId]
  createdAt: [DroneConnectionCreatedAt]
  updatedAt: [DroneConnectionUpdatedAt]
}

input DroneInput {
  name: String!
  description: String
  frame: String
  pictures: [ID]
  brand: String
  weigth_grams: Int
  videos: [ID]
}

input editDroneInput {
  name: String
  description: String
  frame: String
  pictures: [ID]
  brand: String
  weigth_grams: Int
  videos: [ID]
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editMotorInput {
  brand: String
  model: String
  size: String
  description: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input editVideoInput {
  description: String
  videos: [ID]
  url: String
  location: String
  drone: [ID]
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | Drone | createDronePayload | updateDronePayload | deleteDronePayload | DroneConnection | DroneAggregator | DroneAggregatorSum | DroneAggregatorAvg | DroneAggregatorMin | DroneAggregatorMax | DroneGroupBy | DroneConnectionName | DroneConnectionDescription | DroneConnectionFrame | DroneConnectionBrand | DroneConnectionWeigth_grams | DroneConnection_id | DroneConnectionId | DroneConnectionCreatedAt | DroneConnectionUpdatedAt | Motor | createMotorPayload | updateMotorPayload | deleteMotorPayload | MotorConnection | MotorAggregator | MotorGroupBy | MotorConnectionBrand | MotorConnectionModel | MotorConnectionSize | MotorConnectionDescription | MotorConnection_id | MotorConnectionId | MotorConnectionCreatedAt | MotorConnectionUpdatedAt | Video | createVideoPayload | updateVideoPayload | deleteVideoPayload | VideoConnection | VideoAggregator | VideoGroupBy | VideoConnectionDescription | VideoConnectionUrl | VideoConnectionLocation | VideoConnection_id | VideoConnectionId | VideoConnectionCreatedAt | VideoConnectionUpdatedAt | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnection_id | UploadFileConnectionId | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionCreatedAt | UsersPermissionsRoleConnectionUpdatedAt | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionUpdatedAt

type Motor {
  brand: String!
  model: String
  size: String
  description: String
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MotorAggregator {
  count: Int
  totalCount: Int
}

type MotorConnection {
  values: [Motor]
  groupBy: MotorGroupBy
  aggregate: MotorAggregator
}

type MotorConnection_id {
  key: ID
  connection: MotorConnection
}

type MotorConnectionBrand {
  key: String
  connection: MotorConnection
}

type MotorConnectionCreatedAt {
  key: DateTime
  connection: MotorConnection
}

type MotorConnectionDescription {
  key: String
  connection: MotorConnection
}

type MotorConnectionId {
  key: ID
  connection: MotorConnection
}

type MotorConnectionModel {
  key: String
  connection: MotorConnection
}

type MotorConnectionSize {
  key: String
  connection: MotorConnection
}

type MotorConnectionUpdatedAt {
  key: DateTime
  connection: MotorConnection
}

type MotorGroupBy {
  brand: [MotorConnectionBrand]
  model: [MotorConnectionModel]
  size: [MotorConnectionSize]
  description: [MotorConnectionDescription]
  _id: [MotorConnection_id]
  id: [MotorConnectionId]
  createdAt: [MotorConnectionCreatedAt]
  updatedAt: [MotorConnectionUpdatedAt]
}

input MotorInput {
  brand: String!
  model: String
  size: String
  description: String
}

type Mutation {
  createDrone(input: createDroneInput): createDronePayload
  updateDrone(input: updateDroneInput): updateDronePayload
  deleteDrone(input: deleteDroneInput): deleteDronePayload
  createMotor(input: createMotorInput): createMotorPayload
  updateMotor(input: updateMotorInput): updateMotorPayload
  deleteMotor(input: deleteMotorInput): deleteMotorPayload
  createVideo(input: createVideoInput): createVideoPayload
  updateVideo(input: updateVideoInput): updateVideoPayload
  deleteVideo(input: deleteVideoInput): deleteVideoPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UserInput!): UsersPermissionsLoginPayload!
}

type Query {
  drone(id: ID!): Drone
  drones(sort: String, limit: Int, start: Int, where: JSON): [Drone]
  dronesConnection(sort: String, limit: Int, start: Int, where: JSON): DroneConnection
  motor(id: ID!): Motor
  motors(sort: String, limit: Int, start: Int, where: JSON): [Motor]
  motorsConnection(sort: String, limit: Int, start: Int, where: JSON): MotorConnection
  video(id: ID!): Video
  videos(sort: String, limit: Int, start: Int, where: JSON): [Video]
  videosConnection(sort: String, limit: Int, start: Int, where: JSON): VideoConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateDroneInput {
  where: InputID
  data: editDroneInput
}

type updateDronePayload {
  drone: Drone
}

input updateMotorInput {
  where: InputID
  data: editMotorInput
}

type updateMotorPayload {
  motor: Motor
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input updateVideoInput {
  where: InputID
  data: editVideoInput
}

type updateVideoPayload {
  video: Video
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  _id: [UploadFileConnection_id]
  id: [UploadFileConnectionId]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionCreatedAt {
  key: DateTime
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionUpdatedAt {
  key: DateTime
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
  _id: [UsersPermissionsRoleConnection_id]
  id: [UsersPermissionsRoleConnectionId]
  createdAt: [UsersPermissionsRoleConnectionCreatedAt]
  updatedAt: [UsersPermissionsRoleConnectionUpdatedAt]
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  _id: [UsersPermissionsUserConnection_id]
  id: [UsersPermissionsUserConnectionId]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
}

type Video {
  description: String
  url: String
  location: String
  videos(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  drone(sort: String, limit: Int, start: Int, where: JSON): [Drone]
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VideoAggregator {
  count: Int
  totalCount: Int
}

type VideoConnection {
  values: [Video]
  groupBy: VideoGroupBy
  aggregate: VideoAggregator
}

type VideoConnection_id {
  key: ID
  connection: VideoConnection
}

type VideoConnectionCreatedAt {
  key: DateTime
  connection: VideoConnection
}

type VideoConnectionDescription {
  key: String
  connection: VideoConnection
}

type VideoConnectionId {
  key: ID
  connection: VideoConnection
}

type VideoConnectionLocation {
  key: String
  connection: VideoConnection
}

type VideoConnectionUpdatedAt {
  key: DateTime
  connection: VideoConnection
}

type VideoConnectionUrl {
  key: String
  connection: VideoConnection
}

type VideoGroupBy {
  description: [VideoConnectionDescription]
  url: [VideoConnectionUrl]
  location: [VideoConnectionLocation]
  _id: [VideoConnection_id]
  id: [VideoConnectionId]
  createdAt: [VideoConnectionCreatedAt]
  updatedAt: [VideoConnectionUpdatedAt]
}

input VideoInput {
  description: String
  videos: [ID]
  url: String
  location: String
  drone: [ID]
}
